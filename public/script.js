const socket= io('') ;
const interface= require('./change_interface') ; // File that contains function that will be used to change interface of page
var vidgrid= document.getElementById("vid-grid") ; // Element of page where all the video streams will be added
// initializing peerjs 
var mpeer= new Peer(undefined, {
    path : '/peerjs' ,
    host: '/' ,
    port: 443 // change if using on local host
}) 

var myuserid ; // Self userid generated by Peerjs
var video_meet= false ; // Variable that will store if self user is currently present in video meeting
const peers= {}  // Dictionary to save the call with a remote user
var num_users=0 ; // This variable will save the number of participants present in video meeting at any time
var a=true ; var v=true ;  // setting audio and video true for initial stream
let mycalls= new Array() ; // This array will save all the calls that the user is attending
let myvidstr ;  // self video stream that will be sent to all peers

// when a new peer connection is eastablished
mpeer.on('open', id => {
    myuserid=id ; // self user id will be saved
   socket.emit('join-room', Room_id, id, name) ;  // everyone in the room will be notified
})

 // Function will be called when a new user join the room
socket.on('user-connected', (userId, username) => {
    // It will be added in the chat that username has joined room
    $('ul').append(`<li class="message"><b>${username} joined this room. WELCOME ${username}!! :)</b><br/></li>`)
})

socket.on('user-connected-video', (userId, username) => {
    $('ul').append(`<li class="message"><b>${username} joined video meeting :) :) :)</b><br/></li>`)
    // Now if self user is also present in the meeting then he will call the remote user
    if(video_meet)
    connectNewuser(userId, myvidstr) ; // calling the function to exchange streams with new user
})

// To remove the user when he is disconnected
socket.on('user-disconnected', userId => {
    if (peers[userId]) peers[userId].close() //if he had not closed the call before leaving then it will be closed now
  })
  
// When received the message that a user has left the video meet
socket.on('user-left-video', (userId, username) => {
    // It will be added in the chat that username has left meeting
    $('ul').append(`<li class="message"><b>${username} left video meeting :( :( :(</b><br/></li>`)
    if (peers[userId]) peers[userId].close()  // his call will be closed
  })
  
// Here the new user is called with own stream , and received his stream in the answer then we can add his stream on our page
function connectNewuser(userid , stream){
    num_users++ ;
    // first we connect to the peer
    var conn = mpeer.connect('userid');
    conn.on('open', function(){
      conn.send(String(myuserid)); //we can send some data to that user
    });
    const vide= document.createElement('video')  ;
    const call= mpeer.call(userid,myvidstr) ;  // calling new user with own stream and received his answer
    // adding video stream received in answer
    call.on('stream', userVideoStream => {
        addvid(vide, userVideoStream) // adding his stream in own window
    }) ;

    peers[userid] = call  // saving the call with user
    mycalls.push(call) ;  // adding call in array of calls
    // close function will be called when remote user close the call
    call.on('close', () => { 
        num_users-- ;    // number of participants in video meet decreased
        vide.remove() ; //  video of user removed
        adjust_videos() ;
      })   
}

// User called by a user that was already present in meeting.
// Call contains remote user's video stream. Here we will add his stream and answer the call with own stream
mpeer.on('call', call => {
    num_users++ ; // number of participants in video meet increased
    navigator.mediaDevices.getUserMedia({
        video:v ,
        audio:a
    }).then(stream=> {
        
        peers[call.peer] = call ;
        mycalls.push(call) ; 
        call.answer(myvidstr) ;  // Answer the call with own A/V stream.
        const vide= document.createElement('video')  ;
        call.on('stream', remoteStream => {
        addvid(vide, remoteStream)   // adding the stream that the new user send with call
    });
    
     call.on('close', () => {
        num_users-- ; 
        vide.remove() ; 
        adjust_videos() ; 
      })
    })
});

// Video element for self video
const myvid= document.createElement('video') ;
myvid.setAttribute("id", "myvideoloc") ; // giving id so that when user leave meeting, he can release media devices
myvid.muted=true ;

// Function to start the video meeting
function start_now() {
// setting up of self video stream by using audio and video devices of system
navigator.mediaDevices.getUserMedia({
    video:v ,
    audio:a
}).then(stream=>{
    num_users++ ; // increase the number of participants in video meeting
    myvidstr=stream ; // setting self video stream
    addvid(myvid,myvidstr) // adding own stream on page
})
socket.emit('joined-video', Room_id, myuserid, name) ; //To tell everyone in the room that user has joined video meet
}

// Function that will be called when user wants to join video meeting
function start_video_meeting() {
    video_meet= true ; // setting that user is present in video meeting

    interface.joined_meeting   // function to change interface when user join video meeting   
}

function leave_video() {
    video_meet= false ;
    var i;
    // releasing the media devices when leaving meeting
    myvidstr.getTracks().forEach( (track) => {
        track.stop();
        });
    let k= document.getElementById("myvideoloc") ;
    k.srcObject= null ;
    // loop to close all the video user was attending
    for(i=0; i<mycalls.length; i++)
    {
        mycalls[i].close() ;
    }
    // Message to soccket to tell that user has left the video meeting
    socket.emit('user-discon-video',Room_id, myuserid, name) ;
    interface.left_meeting   // function to change interface when user leave video meeting
}

// Utility function to add video streams on page
const addvid= (video, stream) => {
    video.srcObject= stream ;
    video.addEventListener('loadedmetadata', ()=> {
    video.play() 
    })
    vidgrid.append(video) ; // video added to page
    adjust_videos() ; // Videos will be adjusted depending on number of users in meeting
}

